services:
  actions-runner:
    volumes:
      # NOTE: 반드시 실행 권한이 필요합니다.
      - ./actions-runner/entrypoint.sh:/actions-runner/entrypoint.sh

  deploy:
    ports:
      - 8001:8000
    volumes:
      # NOTE:
      # - 최초 한번 만 직접 파일을 업로드하고, 이후 해당 스크립트가 실행되며 자신을 업데이트 한다
      # - Jenkinsfile 에서 해당 스크립트를 실행한다
      - ./deploy/deploy_from_nexus.sh:/app/deploy_from_nexus.sh
      # NOTE: 반드시 실행 권한이 필요합니다.
      - ./deploy/entrypoint.sh:/app/entrypoint.sh
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/gunicorn.conf.py:/app/gunicorn.conf.py

  db:
    build:
      context: ./db
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:-"--encoding=UTF8 --lc-collate=ko_KR.utf8 --lc-ctype=ko_KR.utf8"}

  server:
    build:
      context: ./server
      args:
        - REQUIREMENT_FILENAME=requirements.dev.txt
    ports:
      - 8000:8000
      - 5678:5678
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    volumes:
      - ./server:/app
    # https://docs.docker.com/reference/compose-file/services/#depends_on
    depends_on:
      - db
    command:
      [
        "sh",
        "-c",
        "python -m debugpy --wait-for-client --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --nothreading",
      ]

volumes:
  db_data:
