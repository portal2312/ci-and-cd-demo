name: Actions main CI

on:
  push:
    branches: [main]

jobs:
  server-build-test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      # https://docs.astral.sh/uv/guides/integration/github/#caching
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('server/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('server/uv.lock') }}
            uv-${{ runner.os }}

      # https://docs.astral.sh/uv/guides/integration/github/
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "server/uv.lock"

      # https://docs.astral.sh/uv/guides/integration/github/#syncing-and-running
      - name: Install server dependencies
        working-directory: server
        run: uv sync --locked --all-extras --dev

      # https://docs.astral.sh/uv/guides/integration/github/#caching
      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Run migrations
        working-directory: server
        run: uv run python manage.py migrate --noinput

      - name: Export GraphQL schema
        working-directory: server
        run: uv run python manage.py export_schema --path schema.graphql project.schema

      - name: Run tests
        working-directory: server
        run: uv run pytest --maxfail=1 --disable-warnings -q

      - name: Archive server source
        run: |
          tar --exclude='**/.dockerignore' \
              --exclude='**/docker-compose*' \
              --exclude='**/compose*' \
              --exclude='**/Dockerfile*' \
              --exclude='*.py[oc]' \
              --exclude='*.egg-info' \
              --exclude='*.bak' \
              --exclude='* copy*' \
              --exclude='.env' \
              --exclude='**/.vscode' \
              --exclude='!**/.vscode/.*.json' \
              --exclude='**/__pycache__' \
              --exclude='**/db.sqlite3' \
              --exclude='**/schema.graphql' \
              --exclude='**/.pytest_cache' \
              --exclude='**/.venv' \
              -cvf server/server.tar --directory server .

      - name: Upload server artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-dist
          path: server/server.tar

  client-build:
    runs-on: ubuntu-latest
    env:
      # graphql codegen 시, 사용 되는 GraphQL 스키마
      GRAPHQL_SCHEMA: schema.graphql
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable Corepack
        working-directory: client
        run: corepack enable

      - name: Install dependencies
        working-directory: client
        run: yarn install --immutable

      - name: GraphQL Codegen
        working-directory: client
        run: yarn run codegen

      - name: Build client
        working-directory: client
        run: |
          rm -rf src/gql
          yarn run build

      - name: Archive client dist
        run: tar -cvf client/client-dist.tar --directory client/dist .

      - name: Upload client artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-dist
          path: client/client-dist.tar

  deploy:
    runs-on: ubuntu-latest
    needs: [client-build, server-build-test]
    steps:
      - uses: actions/checkout@v4

      - name: Archive and Upload deploy to Nexus
        run: |
          tar --exclude='**/.dockerignore' \
              --exclude='**/Dockerfile*' \
              --exclude='deploy.tar' \
              -cvf deploy/deploy.tar --directory deploy .
          curl -u ${{ secrets.NEXUS_USER }}:${{ secrets.NEXUS_PASSWORD }} \
            --upload-file deploy/deploy.tar \
            ${{ secrets.NEXUS_URL }}/repository/${{ secrets.NEXUS_REPO }}/deploy.tar
          rm -rf deploy/deploy.tar

      - name: Download client artifact
        uses: actions/download-artifact@v4
        with:
          name: client-dist
          path: client/

      - name: Upload client to Nexus
        run: |
          curl -u ${{ secrets.NEXUS_USER }}:${{ secrets.NEXUS_PASSWORD }} \
            --upload-file client/client-dist.tar \
            ${{ secrets.NEXUS_URL }}/repository/${{ secrets.NEXUS_REPO }}/client-dist.tar

      - name: Download server artifact
        uses: actions/download-artifact@v4
        with:
          name: server-dist
          path: server/

      - name: Upload server to Nexus
        run: |
          curl -u ${{ secrets.NEXUS_USER }}:${{ secrets.NEXUS_PASSWORD }} \
            --upload-file server/server.tar \
            ${{ secrets.NEXUS_URL }}/repository/${{ secrets.NEXUS_REPO }}/server.tar

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Notify Jenkins
        run: curl -X POST "${{ secrets.JENKINS_URL }}/generic-webhook-trigger/invoke?token=${{ secrets.JENKINS_JOB_TOKEN }}"
